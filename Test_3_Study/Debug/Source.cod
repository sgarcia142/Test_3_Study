; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

	TITLE	V:\School Files\CS3843\VSProjects\Test_3_Study\Test_3_Study\Source.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?decrement@@YAXXZ				; decrement
PUBLIC	?twos_comp@@YAXXZ				; twos_comp
PUBLIC	?decrement2@@YAXXZ				; decrement2
PUBLIC	?divide_by_16_signed@@YAXXZ			; divide_by_16_signed
PUBLIC	?force_0_3_7_to_1@@YAXXZ			; force_0_3_7_to_1
PUBLIC	?maskoutbits@@YAXXZ				; maskoutbits
PUBLIC	?throwbits045@@YAXXZ				; throwbits045
PUBLIC	?alter_esp@@YAXXZ				; alter_esp
PUBLIC	?string_practice@@YAXHDD@Z			; string_practice
PUBLIC	?move_it@@YAXPAD0H@Z				; move_it
PUBLIC	?reverse_2_bytes@@YAXPADH@Z			; reverse_2_bytes
PUBLIC	?reverse_4_bytes@@YAXPADH@Z			; reverse_4_bytes
PUBLIC	?find_it@@YAHPAD0H@Z				; find_it
PUBLIC	?string_fun_1@@YAXPAD0H@Z			; string_fun_1
PUBLIC	?copy_string@@YAXPAD0H@Z			; copy_string
PUBLIC	?copy_string_2@@YAXPAD0H@Z			; copy_string_2
PUBLIC	?func@@YAHPAD@Z					; func
PUBLIC	?multi@@YAXXZ					; multi
PUBLIC	?interpret@@YAXXZ				; interpret
PUBLIC	?find_Y@@YAHPADD@Z				; find_Y
PUBLIC	?rotate_it_baby@@YAXPADH@Z			; rotate_it_baby
PUBLIC	?set_them@@YAXXZ				; set_them
PUBLIC	_main
PUBLIC	??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@
CONST	SEGMENT
??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@ DB 'Hello World!', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT _main
_TEXT	SEGMENT
_d$ = -160						; size = 13
_s$ = -136						; size = 13
_test$ = -97						; size = 1
_gk3$ = -88						; size = 12
_gk2$ = -68						; size = 16
_gk$ = -44						; size = 12
_dat$ = -24						; size = 6
_bytes_4$ = -8						; size = 4
_main	PROC						; COMDAT

; 327  : int main(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 64 01 00
	00		 sub	 esp, 356		; 00000164H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00012	b9 59 00 00 00	 mov	 ecx, 89			; 00000059H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 328  : 	char bytes_4[] = { 0x11, 0x33, 0x44, 0x55 };

  0001e	c6 45 f8 11	 mov	 BYTE PTR _bytes_4$[ebp], 17 ; 00000011H
  00022	c6 45 f9 33	 mov	 BYTE PTR _bytes_4$[ebp+1], 51 ; 00000033H
  00026	c6 45 fa 44	 mov	 BYTE PTR _bytes_4$[ebp+2], 68 ; 00000044H
  0002a	c6 45 fb 55	 mov	 BYTE PTR _bytes_4$[ebp+3], 85 ; 00000055H

; 329  : 	char dat[] = { 0x11, 0x33, 0x44, 0xAA, 0x43, 0x00 };

  0002e	c6 45 e8 11	 mov	 BYTE PTR _dat$[ebp], 17	; 00000011H
  00032	c6 45 e9 33	 mov	 BYTE PTR _dat$[ebp+1], 51 ; 00000033H
  00036	c6 45 ea 44	 mov	 BYTE PTR _dat$[ebp+2], 68 ; 00000044H
  0003a	c6 45 eb aa	 mov	 BYTE PTR _dat$[ebp+3], -86 ; ffffffaaH
  0003e	c6 45 ec 43	 mov	 BYTE PTR _dat$[ebp+4], 67 ; 00000043H
  00042	c6 45 ed 00	 mov	 BYTE PTR _dat$[ebp+5], 0

; 330  : 	char gk[] = { 0x74, 0x20, 0x43, 0x61, 0x20, 0x6D, 0x6F, 0x6E, 0x2E, 0x00, 0x61, 0x74 };

  00046	c6 45 d4 74	 mov	 BYTE PTR _gk$[ebp], 116	; 00000074H
  0004a	c6 45 d5 20	 mov	 BYTE PTR _gk$[ebp+1], 32 ; 00000020H
  0004e	c6 45 d6 43	 mov	 BYTE PTR _gk$[ebp+2], 67 ; 00000043H
  00052	c6 45 d7 61	 mov	 BYTE PTR _gk$[ebp+3], 97 ; 00000061H
  00056	c6 45 d8 20	 mov	 BYTE PTR _gk$[ebp+4], 32 ; 00000020H
  0005a	c6 45 d9 6d	 mov	 BYTE PTR _gk$[ebp+5], 109 ; 0000006dH
  0005e	c6 45 da 6f	 mov	 BYTE PTR _gk$[ebp+6], 111 ; 0000006fH
  00062	c6 45 db 6e	 mov	 BYTE PTR _gk$[ebp+7], 110 ; 0000006eH
  00066	c6 45 dc 2e	 mov	 BYTE PTR _gk$[ebp+8], 46 ; 0000002eH
  0006a	c6 45 dd 00	 mov	 BYTE PTR _gk$[ebp+9], 0
  0006e	c6 45 de 61	 mov	 BYTE PTR _gk$[ebp+10], 97 ; 00000061H
  00072	c6 45 df 74	 mov	 BYTE PTR _gk$[ebp+11], 116 ; 00000074H

; 331  : 	char gk2[] = { 0x43, 0x61, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x61, 0x74, 0x2E, 0x00 };

  00076	c6 45 bc 43	 mov	 BYTE PTR _gk2$[ebp], 67	; 00000043H
  0007a	c6 45 bd 61	 mov	 BYTE PTR _gk2$[ebp+1], 97 ; 00000061H
  0007e	c6 45 be 74	 mov	 BYTE PTR _gk2$[ebp+2], 116 ; 00000074H
  00082	c6 45 bf 20	 mov	 BYTE PTR _gk2$[ebp+3], 32 ; 00000020H
  00086	c6 45 c0 6f	 mov	 BYTE PTR _gk2$[ebp+4], 111 ; 0000006fH
  0008a	c6 45 c1 6e	 mov	 BYTE PTR _gk2$[ebp+5], 110 ; 0000006eH
  0008e	c6 45 c2 20	 mov	 BYTE PTR _gk2$[ebp+6], 32 ; 00000020H
  00092	c6 45 c3 74	 mov	 BYTE PTR _gk2$[ebp+7], 116 ; 00000074H
  00096	c6 45 c4 68	 mov	 BYTE PTR _gk2$[ebp+8], 104 ; 00000068H
  0009a	c6 45 c5 65	 mov	 BYTE PTR _gk2$[ebp+9], 101 ; 00000065H
  0009e	c6 45 c6 20	 mov	 BYTE PTR _gk2$[ebp+10], 32 ; 00000020H
  000a2	c6 45 c7 6d	 mov	 BYTE PTR _gk2$[ebp+11], 109 ; 0000006dH
  000a6	c6 45 c8 61	 mov	 BYTE PTR _gk2$[ebp+12], 97 ; 00000061H
  000aa	c6 45 c9 74	 mov	 BYTE PTR _gk2$[ebp+13], 116 ; 00000074H
  000ae	c6 45 ca 2e	 mov	 BYTE PTR _gk2$[ebp+14], 46 ; 0000002eH
  000b2	c6 45 cb 00	 mov	 BYTE PTR _gk2$[ebp+15], 0

; 332  : 	char gk3[] = { 0x43, 0x61, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x6D, 0x61, 0x74, 0x2E, 0x00 };

  000b6	c6 45 a8 43	 mov	 BYTE PTR _gk3$[ebp], 67	; 00000043H
  000ba	c6 45 a9 61	 mov	 BYTE PTR _gk3$[ebp+1], 97 ; 00000061H
  000be	c6 45 aa 74	 mov	 BYTE PTR _gk3$[ebp+2], 116 ; 00000074H
  000c2	c6 45 ab 20	 mov	 BYTE PTR _gk3$[ebp+3], 32 ; 00000020H
  000c6	c6 45 ac 6f	 mov	 BYTE PTR _gk3$[ebp+4], 111 ; 0000006fH
  000ca	c6 45 ad 6e	 mov	 BYTE PTR _gk3$[ebp+5], 110 ; 0000006eH
  000ce	c6 45 ae 20	 mov	 BYTE PTR _gk3$[ebp+6], 32 ; 00000020H
  000d2	c6 45 af 6d	 mov	 BYTE PTR _gk3$[ebp+7], 109 ; 0000006dH
  000d6	c6 45 b0 61	 mov	 BYTE PTR _gk3$[ebp+8], 97 ; 00000061H
  000da	c6 45 b1 74	 mov	 BYTE PTR _gk3$[ebp+9], 116 ; 00000074H
  000de	c6 45 b2 2e	 mov	 BYTE PTR _gk3$[ebp+10], 46 ; 0000002eH
  000e2	c6 45 b3 00	 mov	 BYTE PTR _gk3$[ebp+11], 0

; 333  : 	char test = 'A';

  000e6	c6 45 9f 41	 mov	 BYTE PTR _test$[ebp], 65 ; 00000041H

; 334  : 	int f;
; 335  : 	char s[] = "Hello World!";

  000ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@
  000ef	89 85 78 ff ff
	ff		 mov	 DWORD PTR _s$[ebp], eax
  000f5	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+4
  000fb	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _s$[ebp+4], ecx
  00101	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+8
  00107	89 55 80	 mov	 DWORD PTR _s$[ebp+8], edx
  0010a	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+12
  0010f	88 45 84	 mov	 BYTE PTR _s$[ebp+12], al

; 336  : 	char d[13]="";

  00112	a0 00 00 00 00	 mov	 al, BYTE PTR ??_C@_00CNPNBAHC@?$AA@
  00117	88 85 60 ff ff
	ff		 mov	 BYTE PTR _d$[ebp], al
  0011d	33 c0		 xor	 eax, eax
  0011f	89 85 61 ff ff
	ff		 mov	 DWORD PTR _d$[ebp+1], eax
  00125	89 85 65 ff ff
	ff		 mov	 DWORD PTR _d$[ebp+5], eax
  0012b	89 85 69 ff ff
	ff		 mov	 DWORD PTR _d$[ebp+9], eax

; 337  : 
; 338  : 
; 339  : 	//decrement();
; 340  : 	//maskoutbits();
; 341  : 	//throwbits045();
; 342  : 	//alter_esp();
; 343  : 	//string_practice(5,'A','B');
; 344  : 	//twos_comp();
; 345  : 	//force_0_3_7_to_1();
; 346  : 	//divide_by_16_signed();
; 347  : 	//decrement2();
; 348  : 	//move_it(s,d,12);
; 349  : 
; 350  : 	//gptrK = &test;
; 351  : 
; 352  : 	//reverse_4_bytes(gk3, 12);
; 353  : 	//reverse_2_bytes(gk2, 16);
; 354  : 	//f = find_it(s, "W", 12);
; 355  : 
; 356  : 	//copy_string(s,d,13);
; 357  : 	//copy_string_2(s, d, 13);
; 358  : 	//multi();
; 359  : 	//f = func(dat);
; 360  : 	//f = find_00(dat);
; 361  : 	//f = find_Y(dat, 'C');
; 362  : 	//interpret();
; 363  : 
; 364  : 	//rotate_it_baby(bytes_4, 4);
; 365  : 
; 366  : 	//string_fun_1(s, d, 13);
; 367  : 	set_them();

  00131	e8 00 00 00 00	 call	 ?set_them@@YAXXZ	; set_them

; 368  : 	return 0;

  00136	33 c0		 xor	 eax, eax

; 369  : }

  00138	52		 push	 edx
  00139	8b cd		 mov	 ecx, ebp
  0013b	50		 push	 eax
  0013c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN11@main
  00142	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00147	58		 pop	 eax
  00148	5a		 pop	 edx
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
  0014c	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00152	3b ec		 cmp	 ebp, esp
  00154	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c3		 ret	 0
  0015d	8d 49 00	 npad	 3
$LN11@main:
  00160	07 00 00 00	 DD	 7
  00164	00 00 00 00	 DD	 $LN10@main
$LN10@main:
  00168	f8 ff ff ff	 DD	 -8			; fffffff8H
  0016c	04 00 00 00	 DD	 4
  00170	00 00 00 00	 DD	 $LN3@main
  00174	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00178	06 00 00 00	 DD	 6
  0017c	00 00 00 00	 DD	 $LN4@main
  00180	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00184	0c 00 00 00	 DD	 12			; 0000000cH
  00188	00 00 00 00	 DD	 $LN5@main
  0018c	bc ff ff ff	 DD	 -68			; ffffffbcH
  00190	10 00 00 00	 DD	 16			; 00000010H
  00194	00 00 00 00	 DD	 $LN6@main
  00198	a8 ff ff ff	 DD	 -88			; ffffffa8H
  0019c	0c 00 00 00	 DD	 12			; 0000000cH
  001a0	00 00 00 00	 DD	 $LN7@main
  001a4	78 ff ff ff	 DD	 -136			; ffffff78H
  001a8	0d 00 00 00	 DD	 13			; 0000000dH
  001ac	00 00 00 00	 DD	 $LN8@main
  001b0	60 ff ff ff	 DD	 -160			; ffffff60H
  001b4	0d 00 00 00	 DD	 13			; 0000000dH
  001b8	00 00 00 00	 DD	 $LN9@main
$LN9@main:
  001bc	64		 DB	 100			; 00000064H
  001bd	00		 DB	 0
$LN8@main:
  001be	73		 DB	 115			; 00000073H
  001bf	00		 DB	 0
$LN7@main:
  001c0	67		 DB	 103			; 00000067H
  001c1	6b		 DB	 107			; 0000006bH
  001c2	33		 DB	 51			; 00000033H
  001c3	00		 DB	 0
$LN6@main:
  001c4	67		 DB	 103			; 00000067H
  001c5	6b		 DB	 107			; 0000006bH
  001c6	32		 DB	 50			; 00000032H
  001c7	00		 DB	 0
$LN5@main:
  001c8	67		 DB	 103			; 00000067H
  001c9	6b		 DB	 107			; 0000006bH
  001ca	00		 DB	 0
$LN4@main:
  001cb	64		 DB	 100			; 00000064H
  001cc	61		 DB	 97			; 00000061H
  001cd	74		 DB	 116			; 00000074H
  001ce	00		 DB	 0
$LN3@main:
  001cf	62		 DB	 98			; 00000062H
  001d0	79		 DB	 121			; 00000079H
  001d1	74		 DB	 116			; 00000074H
  001d2	65		 DB	 101			; 00000065H
  001d3	73		 DB	 115			; 00000073H
  001d4	5f		 DB	 95			; 0000005fH
  001d5	34		 DB	 52			; 00000034H
  001d6	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?set_them@@YAXXZ
_TEXT	SEGMENT
?set_them@@YAXXZ PROC					; set_them, COMDAT

; 317  : void set_them(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 318  : 	__asm{
; 319  : 		xor eax, eax;

  0001e	33 c0		 xor	 eax, eax

; 320  : 		mov eax, 0xFFFFFBFF;

  00020	b8 ff fb ff ff	 mov	 eax, -1025		; fffffbffH

; 321  : 		or eax, 0x00000400;

  00025	0d 00 04 00 00	 or	 eax, 1024		; 00000400H

; 322  : 		and eax, 0xFFFFFFBE;

  0002a	83 e0 be	 and	 eax, -66		; ffffffbeH

; 323  : 	}
; 324  : 	return;
; 325  : }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
?set_them@@YAXXZ ENDP					; set_them
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?rotate_it_baby@@YAXPADH@Z
_TEXT	SEGMENT
_dat$ = 8						; size = 4
_rotate_count$ = 12					; size = 4
?rotate_it_baby@@YAXPADH@Z PROC				; rotate_it_baby, COMDAT

; 302  : void rotate_it_baby(char* dat, int rotate_count){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 303  : 	__asm{
; 304  : 		xor ecx, ecx;		

  0001e	33 c9		 xor	 ecx, ecx

; 305  : 		xor eax, eax;

  00020	33 c0		 xor	 eax, eax

; 306  : 		mov ecx, [ebp + 12];

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR [ebp+12]

; 307  : 		mov esi, dat;

  00025	8b 75 08	 mov	 esi, DWORD PTR _dat$[ebp]

; 308  : 		mov eax, [esi];

  00028	8b 06		 mov	 eax, DWORD PTR [esi]

; 309  : 		ror eax, cl;

  0002a	d3 c8		 ror	 eax, cl

; 310  : 		and eax, 0x0000FFFF;

  0002c	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH

; 311  : 	}
; 312  : 
; 313  : 	return;
; 314  : }

  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?rotate_it_baby@@YAXPADH@Z ENDP				; rotate_it_baby
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?find_Y@@YAHPADD@Z
_TEXT	SEGMENT
_gK$ = 8						; size = 4
_Y$ = 12						; size = 1
?find_Y@@YAHPADD@Z PROC					; find_Y, COMDAT

; 276  : int find_Y(char* gK, char Y){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 277  : 	__asm{
; 278  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 279  : 		xor eax, eax;

  00020	33 c0		 xor	 eax, eax

; 280  : 		xor ebx, ebx;

  00022	33 db		 xor	 ebx, ebx

; 281  : 		mov esi, gK;

  00024	8b 75 08	 mov	 esi, DWORD PTR _gK$[ebp]

; 282  : 		mov al, Y;

  00027	8a 45 0c	 mov	 al, BYTE PTR _Y$[ebp]
$Search_Loop$3:

; 283  : 	Search_Loop:
; 284  : 		mov ah, [esi + ecx];

  0002a	8a 24 0e	 mov	 ah, BYTE PTR [esi+ecx]

; 285  : 		test ah, ah;

  0002d	84 e4		 test	 ah, ah

; 286  : 		je Not_Found;

  0002f	74 07		 je	 SHORT $Not_Found$4

; 287  : 		cmp ah, al;

  00031	3a e0		 cmp	 ah, al

; 288  : 		je Found;

  00033	74 0a		 je	 SHORT $Found$5

; 289  : 		inc ecx;

  00035	41		 inc	 ecx

; 290  : 		jmp Search_Loop;

  00036	eb f2		 jmp	 SHORT $Search_Loop$3
$Not_Found$4:

; 291  : 	Not_Found:
; 292  : 		mov eax, -1;

  00038	b8 ff ff ff ff	 mov	 eax, -1

; 293  : 		jmp EXIT;

  0003d	eb 04		 jmp	 SHORT $EXIT$6
$Found$5:

; 294  : 	Found:
; 295  : 		mov eax, ecx;

  0003f	8b c1		 mov	 eax, ecx

; 296  : 		jmp EXIT;

  00041	eb 00		 jmp	 SHORT $EXIT$6
$EXIT$6:

; 297  : 	EXIT:
; 298  : 	}
; 299  : 	return;
; 300  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?find_Y@@YAHPADD@Z ENDP					; find_Y
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?interpret@@YAXXZ
_TEXT	SEGMENT
_gptrK$ = -32						; size = 4
_gk3$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
?interpret@@YAXXZ PROC					; interpret, COMDAT

; 240  : void interpret(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 241  : 	char gk3[] = { 0x43, 0x61, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x6D, 0x61, 0x74, 0x2E, 0x00 };

  00028	c6 45 ec 43	 mov	 BYTE PTR _gk3$[ebp], 67	; 00000043H
  0002c	c6 45 ed 61	 mov	 BYTE PTR _gk3$[ebp+1], 97 ; 00000061H
  00030	c6 45 ee 74	 mov	 BYTE PTR _gk3$[ebp+2], 116 ; 00000074H
  00034	c6 45 ef 20	 mov	 BYTE PTR _gk3$[ebp+3], 32 ; 00000020H
  00038	c6 45 f0 6f	 mov	 BYTE PTR _gk3$[ebp+4], 111 ; 0000006fH
  0003c	c6 45 f1 6e	 mov	 BYTE PTR _gk3$[ebp+5], 110 ; 0000006eH
  00040	c6 45 f2 20	 mov	 BYTE PTR _gk3$[ebp+6], 32 ; 00000020H
  00044	c6 45 f3 6d	 mov	 BYTE PTR _gk3$[ebp+7], 109 ; 0000006dH
  00048	c6 45 f4 61	 mov	 BYTE PTR _gk3$[ebp+8], 97 ; 00000061H
  0004c	c6 45 f5 74	 mov	 BYTE PTR _gk3$[ebp+9], 116 ; 00000074H
  00050	c6 45 f6 2e	 mov	 BYTE PTR _gk3$[ebp+10], 46 ; 0000002eH
  00054	c6 45 f7 00	 mov	 BYTE PTR _gk3$[ebp+11], 0

; 242  : 	char *gptrK;
; 243  : 	gptrK = gk3;

  00058	8d 45 ec	 lea	 eax, DWORD PTR _gk3$[ebp]
  0005b	89 45 e0	 mov	 DWORD PTR _gptrK$[ebp], eax

; 244  : 	__asm{
; 245  : 		lea esi, gk3;

  0005e	8d 75 ec	 lea	 esi, DWORD PTR _gk3$[ebp]

; 246  : 		mov eax, dword ptr [gk3+4];

  00061	8b 45 f0	 mov	 eax, DWORD PTR _gk3$[ebp+4]

; 247  : 		lea edi, gptrK;

  00064	8d 7d e0	 lea	 edi, DWORD PTR _gptrK$[ebp]

; 248  : 		xor ecx, ecx;

  00067	33 c9		 xor	 ecx, ecx

; 249  : 		mov edx, [edi];

  00069	8b 17		 mov	 edx, DWORD PTR [edi]

; 250  : 		add ecx, 4;

  0006b	83 c1 04	 add	 ecx, 4

; 251  : 		mov bx, word ptr [gk3 + ecx * 2];

  0006e	66 8b 9c 4d ec
	ff ff ff	 mov	 bx, WORD PTR _gk3$[ebp+ecx*2]

; 252  : 		mov ah, byte ptr [gk3 + ecx * 2];

  00076	8a a4 4d ec ff
	ff ff		 mov	 ah, BYTE PTR _gk3$[ebp+ecx*2]

; 253  : 		mov al, byte ptr [gk3 + ecx * 2 + 1];

  0007d	8a 84 4d ed ff
	ff ff		 mov	 al, BYTE PTR _gk3$[ebp+ecx*2+1]

; 254  : 	}
; 255  : 	return;
; 256  : }

  00084	52		 push	 edx
  00085	8b cd		 mov	 ecx, ebp
  00087	50		 push	 eax
  00088	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@interpret
  0008e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00093	58		 pop	 eax
  00094	5a		 pop	 edx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009b	33 cd		 xor	 ecx, ebp
  0009d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a2	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
  000b3	90		 npad	 1
$LN6@interpret:
  000b4	02 00 00 00	 DD	 2
  000b8	00 00 00 00	 DD	 $LN5@interpret
$LN5@interpret:
  000bc	ec ff ff ff	 DD	 -20			; ffffffecH
  000c0	0c 00 00 00	 DD	 12			; 0000000cH
  000c4	00 00 00 00	 DD	 $LN3@interpret
  000c8	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000cc	04 00 00 00	 DD	 4
  000d0	00 00 00 00	 DD	 $LN4@interpret
$LN4@interpret:
  000d4	67		 DB	 103			; 00000067H
  000d5	70		 DB	 112			; 00000070H
  000d6	74		 DB	 116			; 00000074H
  000d7	72		 DB	 114			; 00000072H
  000d8	4b		 DB	 75			; 0000004bH
  000d9	00		 DB	 0
$LN3@interpret:
  000da	67		 DB	 103			; 00000067H
  000db	6b		 DB	 107			; 0000006bH
  000dc	33		 DB	 51			; 00000033H
  000dd	00		 DB	 0
?interpret@@YAXXZ ENDP					; interpret
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?multi@@YAXXZ
_TEXT	SEGMENT
?multi@@YAXXZ PROC					; multi, COMDAT

; 231  : void multi(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 232  : 	__asm{
; 233  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 234  : 		mov cl, 0x08;

  00020	b1 08		 mov	 cl, 8

; 235  : 		shl cl, 3;

  00022	c0 e1 03	 shl	 cl, 3

; 236  : 	}
; 237  : 	return;
; 238  : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?multi@@YAXXZ ENDP					; multi
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?func@@YAHPAD@Z
_TEXT	SEGMENT
_d$ = 8							; size = 4
?func@@YAHPAD@Z PROC					; func, COMDAT

; 215  : int func(char* d){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 216  : 	__asm{
; 217  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 218  : 		xor eax, eax;

  00020	33 c0		 xor	 eax, eax

; 219  : 		mov edi, d;

  00022	8b 7d 08	 mov	 edi, DWORD PTR _d$[ebp]
$String_Loop$3:

; 220  : 	String_Loop:
; 221  : 		cmp[edi + ecx], 0x00;

  00025	80 3c 0f 00	 cmp	 BYTE PTR [edi+ecx], 0

; 222  : 		je EXIT;

  00029	74 03		 je	 SHORT $EXIT$4

; 223  : 		inc ecx;

  0002b	41		 inc	 ecx

; 224  : 		jmp String_Loop;

  0002c	eb f7		 jmp	 SHORT $String_Loop$3
$EXIT$4:

; 225  : 	EXIT:
; 226  : 		mov eax, ecx;

  0002e	8b c1		 mov	 eax, ecx

; 227  : 	}
; 228  : 	return;
; 229  : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00039	3b ec		 cmp	 ebp, esp
  0003b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
?func@@YAHPAD@Z ENDP					; func
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?copy_string_2@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_l$ = 16						; size = 4
?copy_string_2@@YAXPAD0H@Z PROC				; copy_string_2, COMDAT

; 200  : void copy_string_2(char* s, char* d, int l){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 201  : 	__asm{
; 202  : 		cld;

  0001e	fc		 cld

; 203  : 		mov esi, s;

  0001f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 204  : 		mov edi, d;

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]
$Loop_Through_String$3:

; 205  : 
; 206  : 	Loop_Through_String:
; 207  : 		lodsb;

  00025	ac		 lodsb

; 208  : 		stosb;

  00026	aa		 stosb

; 209  : 		cmp al, 0;

  00027	3c 00		 cmp	 al, 0

; 210  : 		jne Loop_Through_String;

  00029	75 fa		 jne	 SHORT $Loop_Through_String$3

; 211  : 	}
; 212  : 	return;
; 213  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?copy_string_2@@YAXPAD0H@Z ENDP				; copy_string_2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?copy_string@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_l$ = 16						; size = 4
?copy_string@@YAXPAD0H@Z PROC				; copy_string, COMDAT

; 189  : void copy_string(char* s, char* d, int l){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 190  : 	__asm{
; 191  : 		cld;

  0001e	fc		 cld

; 192  : 		mov esi, s;

  0001f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 193  : 		mov edi, d;

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]

; 194  : 		mov ecx, l;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _l$[ebp]

; 195  : 		rep movsb;

  00028	f3 a4		 rep	  movsb

; 196  : 	}
; 197  : 	return;
; 198  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?copy_string@@YAXPAD0H@Z ENDP				; copy_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?string_fun_1@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_len$ = 16						; size = 4
?string_fun_1@@YAXPAD0H@Z PROC				; string_fun_1, COMDAT

; 178  : void string_fun_1(char* s, char* d, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 179  : 
; 180  : 	__asm{
; 181  : 		mov     esi, s; 

  0001e	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 182  : 		mov     edi, d; 

  00021	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]

; 183  : 		cld;

  00024	fc		 cld

; 184  : 		mov     ecx, len;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]

; 185  : 		rep movsb;

  00028	f3 a4		 rep	  movsb

; 186  : 	}
; 187  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?string_fun_1@@YAXPAD0H@Z ENDP				; string_fun_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?find_it@@YAHPAD0H@Z
_TEXT	SEGMENT
_found$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
_find$ = 12						; size = 4
_len$ = 16						; size = 4
?find_it@@YAHPAD0H@Z PROC				; find_it, COMDAT

; 153  : int find_it(char* str, char* find, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 154  : 	int found = -1;

  00028	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _found$[ebp], -1

; 155  : 	__asm{
; 156  : 		xor ecx, ecx;

  0002f	33 c9		 xor	 ecx, ecx

; 157  : 		xor ebx, ebx;

  00031	33 db		 xor	 ebx, ebx

; 158  : 		xor eax, eax;

  00033	33 c0		 xor	 eax, eax

; 159  : 		mov esi, str;

  00035	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]

; 160  : 		mov edi, find;

  00038	8b 7d 0c	 mov	 edi, DWORD PTR _find$[ebp]

; 161  : 		mov ah, [edi];

  0003b	8a 27		 mov	 ah, BYTE PTR [edi]
$String_Loop$3:

; 162  : 	String_Loop:
; 163  : 		mov al, [esi + ecx];

  0003d	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]

; 164  : 		cmp ah, al;

  00040	3a e0		 cmp	 ah, al

; 165  : 		je Found_It;

  00042	74 08		 je	 SHORT $Found_It$4

; 166  : 		inc ecx;

  00044	41		 inc	 ecx

; 167  : 		cmp ecx, len;

  00045	3b 4d 10	 cmp	 ecx, DWORD PTR _len$[ebp]

; 168  : 		jb String_Loop;

  00048	72 f3		 jb	 SHORT $String_Loop$3

; 169  : 		jmp Exit;

  0004a	eb 07		 jmp	 SHORT $Exit$5
$Found_It$4:

; 170  : 	Found_It:
; 171  : 		mov found, 1;

  0004c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
$Exit$5:

; 172  : 	Exit:
; 173  : 	}
; 174  : 	return found;

  00053	8b 45 f4	 mov	 eax, DWORD PTR _found$[ebp]

; 175  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	33 cd		 xor	 ecx, ebp
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?find_it@@YAHPAD0H@Z ENDP				; find_it
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?reverse_4_bytes@@YAXPADH@Z
_TEXT	SEGMENT
_gK$ = 8						; size = 4
_len$ = 12						; size = 4
?reverse_4_bytes@@YAXPADH@Z PROC			; reverse_4_bytes, COMDAT

; 125  : void reverse_4_bytes(char *gK, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 126  : 
; 127  : 	__asm{
; 128  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 129  : 		xor ebx, ebx;

  00020	33 db		 xor	 ebx, ebx

; 130  : 		xor eax, eax;

  00022	33 c0		 xor	 eax, eax

; 131  : 		mov esi, gK;

  00024	8b 75 08	 mov	 esi, DWORD PTR _gK$[ebp]

; 132  : 		mov ecx, len;

  00027	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 133  : 		shr ecx, 2;

  0002a	c1 e9 02	 shr	 ecx, 2
$Reverse_Loop$3:

; 134  : 	Reverse_Loop:
; 135  : 		//mov eax, [esi + ebx * 4];
; 136  : 		//bswap eax;
; 137  : 		//mov[esi + ebx * 4], eax;
; 138  : 		mov ax, [esi + ebx * 4];

  0002d	66 8b 04 9e	 mov	 ax, WORD PTR [esi+ebx*4]

; 139  : 		ror ax, 8;

  00031	66 c1 c8 08	 ror	 ax, 8

; 140  : 		mov dx, [esi + ebx * 4 + 2];

  00035	66 8b 54 9e 02	 mov	 dx, WORD PTR [esi+ebx*4+2]

; 141  : 		ror dx, 8;

  0003a	66 c1 ca 08	 ror	 dx, 8

; 142  : 		mov[esi + ebx * 4], dx;

  0003e	66 89 14 9e	 mov	 WORD PTR [esi+ebx*4], dx

; 143  : 		mov[esi + ebx * 4 + 2], ax;

  00042	66 89 44 9e 02	 mov	 WORD PTR [esi+ebx*4+2], ax

; 144  : 		inc ebx;

  00047	43		 inc	 ebx

; 145  : 		dec ecx;

  00048	49		 dec	 ecx

; 146  : 		jne Reverse_Loop;

  00049	75 e2		 jne	 SHORT $Reverse_Loop$3

; 147  : 	}
; 148  : 	return;
; 149  : 
; 150  : }

  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
  0004e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00054	3b ec		 cmp	 ebp, esp
  00056	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?reverse_4_bytes@@YAXPADH@Z ENDP			; reverse_4_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?reverse_2_bytes@@YAXPADH@Z
_TEXT	SEGMENT
_gK$ = 8						; size = 4
_len$ = 12						; size = 4
?reverse_2_bytes@@YAXPADH@Z PROC			; reverse_2_bytes, COMDAT

; 104  : void reverse_2_bytes(char *gK, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 105  : 
; 106  : 	__asm{
; 107  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 108  : 		xor ebx, ebx;

  00020	33 db		 xor	 ebx, ebx

; 109  : 		xor eax, eax;

  00022	33 c0		 xor	 eax, eax

; 110  : 		mov ecx, len;

  00024	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 111  : 		shr ecx, 1;

  00027	d1 e9		 shr	 ecx, 1

; 112  : 		mov esi, gK;

  00029	8b 75 08	 mov	 esi, DWORD PTR _gK$[ebp]
$Reverse_Loop$3:

; 113  : 	Reverse_Loop:
; 114  : 		mov ax, [esi + ebx * 2];

  0002c	66 8b 04 5e	 mov	 ax, WORD PTR [esi+ebx*2]

; 115  : 		ror ax, 8;

  00030	66 c1 c8 08	 ror	 ax, 8

; 116  : 		mov[esi + ebx * 2], ax;

  00034	66 89 04 5e	 mov	 WORD PTR [esi+ebx*2], ax

; 117  : 		inc ebx;

  00038	43		 inc	 ebx

; 118  : 		dec ecx;

  00039	49		 dec	 ecx

; 119  : 		jne Reverse_Loop;

  0003a	75 f0		 jne	 SHORT $Reverse_Loop$3

; 120  : 
; 121  : 	}
; 122  : 	return;
; 123  : }

  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00045	3b ec		 cmp	 ebp, esp
  00047	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
?reverse_2_bytes@@YAXPADH@Z ENDP			; reverse_2_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?move_it@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_len$ = 16						; size = 4
?move_it@@YAXPAD0H@Z PROC				; move_it, COMDAT

; 89   : void move_it(char *s, char *d, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 90   : 	__asm{
; 91   : 		mov ecx, len;

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]

; 92   : 		mov esi, s;

  00021	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 93   : 		mov edi, d;

  00024	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]

; 94   : 		cld;

  00027	fc		 cld

; 95   : 		rep movsb;

  00028	f3 a4		 rep	  movsb

; 96   : 		mov edx, 20;

  0002a	ba 14 00 00 00	 mov	 edx, 20			; 00000014H

; 97   : 		mov ecx, d;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _d$[ebp]

; 98   : 		nop;

  00032	90		 npad	 1

; 99   : 	}
; 100  : 	return;
; 101  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?move_it@@YAXPAD0H@Z ENDP				; move_it
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?string_practice@@YAXHDD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_a$ = 12						; size = 1
_y$ = 16						; size = 1
?string_practice@@YAXHDD@Z PROC				; string_practice, COMDAT

; 81   : void string_practice(int x, char a, char y){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 82   : 	__asm{
; 83   : 		push ecx;

  0001e	51		 push	 ecx

; 84   : 		mov[ebp - 4], 0;

  0001f	c6 45 fc 00	 mov	 BYTE PTR [ebp-4], 0

; 85   : 	}
; 86   : 	return;
; 87   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?string_practice@@YAXHDD@Z ENDP				; string_practice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?alter_esp@@YAXXZ
_TEXT	SEGMENT
?alter_esp@@YAXXZ PROC					; alter_esp, COMDAT

; 72   : void alter_esp(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 73   : 	__asm{
; 74   : 		sub esp, 30;

  0001e	83 ec 1e	 sub	 esp, 30			; 0000001eH

; 75   : 		// if we comment out the add back of esp an error will be thrown
; 76   : 		add esp, 30;

  00021	83 c4 1e	 add	 esp, 30			; 0000001eH

; 77   : 	}
; 78   : 	return;
; 79   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?alter_esp@@YAXXZ ENDP					; alter_esp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?throwbits045@@YAXXZ
_TEXT	SEGMENT
?throwbits045@@YAXXZ PROC				; throwbits045, COMDAT

; 59   : void throwbits045(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 60   : 
; 61   : 	__asm {
; 62   : 		// A2 = 10100010
; 63   : 		mov bl, 0xA2;

  0001e	b3 a2		 mov	 bl, -94			; ffffffa2H

; 64   : 		movzx eax, bl;

  00020	0f b6 c3	 movzx	 eax, bl

; 65   : 		// mask out the 1st and 7th bits should end up being 00100000 0x20
; 66   : 		and al, 0x7D;

  00023	24 7d		 and	 al, 125			; 0000007dH

; 67   : 	}
; 68   : 
; 69   : 	return;
; 70   : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?throwbits045@@YAXXZ ENDP				; throwbits045
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?maskoutbits@@YAXXZ
_TEXT	SEGMENT
?maskoutbits@@YAXXZ PROC				; maskoutbits, COMDAT

; 47   : void maskoutbits(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 48   : 
; 49   : 	__asm {
; 50   : 		// A2 = 10100010
; 51   : 		mov al, 0xA2; 

  0001e	b0 a2		 mov	 al, -94			; ffffffa2H

; 52   : 		// mask out the 1st and 7th bits should end up being 00100000 0x20
; 53   : 		and al, 0x7D;

  00020	24 7d		 and	 al, 125			; 0000007dH

; 54   : 	}
; 55   : 
; 56   : 	return;
; 57   : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?maskoutbits@@YAXXZ ENDP				; maskoutbits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?force_0_3_7_to_1@@YAXXZ
_TEXT	SEGMENT
?force_0_3_7_to_1@@YAXXZ PROC				; force_0_3_7_to_1, COMDAT

; 39   : void force_0_3_7_to_1(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 40   : 	__asm {
; 41   : 		xor eax, eax;

  0001e	33 c0		 xor	 eax, eax

; 42   : 		or ah, 0x89;

  00020	80 cc 89	 or	 ah, -119		; ffffff89H

; 43   : 	}
; 44   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?force_0_3_7_to_1@@YAXXZ ENDP				; force_0_3_7_to_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?divide_by_16_signed@@YAXXZ
_TEXT	SEGMENT
?divide_by_16_signed@@YAXXZ PROC			; divide_by_16_signed, COMDAT

; 30   : void divide_by_16_signed(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	__asm{
; 32   : 		xor ebx, ebx;

  0001e	33 db		 xor	 ebx, ebx

; 33   : 		mov ebx, 0xC0;

  00020	bb c0 00 00 00	 mov	 ebx, 192		; 000000c0H

; 34   : 		sar ebx, 4;

  00025	c1 fb 04	 sar	 ebx, 4

; 35   : 	}
; 36   : 
; 37   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?divide_by_16_signed@@YAXXZ ENDP			; divide_by_16_signed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?decrement2@@YAXXZ
_TEXT	SEGMENT
?decrement2@@YAXXZ PROC					; decrement2, COMDAT

; 20   : void decrement2(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 21   : 
; 22   : 	__asm {
; 23   : 		mov eax, 0x5F0AC;

  0001e	b8 ac f0 05 00	 mov	 eax, 389292		; 0005f0acH

; 24   : 		dec ah;

  00023	fe cc		 dec	 ah

; 25   : 	}
; 26   : 
; 27   : 	return;
; 28   : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?decrement2@@YAXXZ ENDP					; decrement2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?twos_comp@@YAXXZ
_TEXT	SEGMENT
?twos_comp@@YAXXZ PROC					; twos_comp, COMDAT

; 11   : void twos_comp(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 12   : 	__asm{
; 13   : 		xor ebx, ebx;

  0001e	33 db		 xor	 ebx, ebx

; 14   : 		mov ebx, 0xFFFFFFFF;

  00020	bb ff ff ff ff	 mov	 ebx, -1

; 15   : 		xor ebx, 0xFFFFFFFF;

  00025	83 f3 ff	 xor	 ebx, -1

; 16   : 		inc ebx;

  00028	43		 inc	 ebx

; 17   : 	}
; 18   : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?twos_comp@@YAXXZ ENDP					; twos_comp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?decrement@@YAXXZ
_TEXT	SEGMENT
?decrement@@YAXXZ PROC					; decrement, COMDAT

; 1    : void decrement(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2    : 
; 3    : 	__asm {
; 4    : 		mov eax, 0x9A3C;

  0001e	b8 3c 9a 00 00	 mov	 eax, 39484		; 00009a3cH

; 5    : 		dec ah;

  00023	fe cc		 dec	 ah

; 6    : 	}
; 7    : 
; 8    : 	return;
; 9    : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?decrement@@YAXXZ ENDP					; decrement
_TEXT	ENDS
END
