; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30723.0 

	TITLE	V:\School Files\CS3843\VSProjects\Test_3_Study\Test_3_Study\Source.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?decrement@@YAXXZ				; decrement
PUBLIC	?twos_comp@@YAXXZ				; twos_comp
PUBLIC	?decrement2@@YAXXZ				; decrement2
PUBLIC	?divide_by_16_signed@@YAXXZ			; divide_by_16_signed
PUBLIC	?force_0_3_7_to_1@@YAXXZ			; force_0_3_7_to_1
PUBLIC	?maskoutbits@@YAXXZ				; maskoutbits
PUBLIC	?throwbits045@@YAXXZ				; throwbits045
PUBLIC	?alter_esp@@YAXXZ				; alter_esp
PUBLIC	?string_practice@@YAXHDD@Z			; string_practice
PUBLIC	?move_it@@YAXPAD0H@Z				; move_it
PUBLIC	?reverse_it@@YAXPADH0@Z				; reverse_it
PUBLIC	?reverse_it2@@YAXPADH@Z				; reverse_it2
PUBLIC	?find_it@@YAHPAD0H@Z				; find_it
PUBLIC	?copy_string@@YAXPAD0H@Z			; copy_string
PUBLIC	?copy_string_2@@YAXPAD0H@Z			; copy_string_2
PUBLIC	_main
PUBLIC	??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@		; `string'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@
CONST	SEGMENT
??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@ DB 'Hello World!', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT _main
_TEXT	SEGMENT
_gptrK$ = -104						; size = 4
_test$ = -89						; size = 1
_gk$ = -80						; size = 12
_d$ = -60						; size = 13
_s$ = -36						; size = 13
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 197  : int main(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 198  : 	//decrement();
; 199  : 	//maskoutbits();
; 200  : 	//throwbits045();
; 201  : 	//alter_esp();
; 202  : 	//string_practice(5,'A','B');
; 203  : 	twos_comp();

  00028	e8 00 00 00 00	 call	 ?twos_comp@@YAXXZ	; twos_comp

; 204  : 	force_0_3_7_to_1();

  0002d	e8 00 00 00 00	 call	 ?force_0_3_7_to_1@@YAXXZ ; force_0_3_7_to_1

; 205  : 	divide_by_16_signed();

  00032	e8 00 00 00 00	 call	 ?divide_by_16_signed@@YAXXZ ; divide_by_16_signed

; 206  : 	decrement2();

  00037	e8 00 00 00 00	 call	 ?decrement2@@YAXXZ	; decrement2

; 207  : 	int f; 
; 208  : 	char s[] = "Hello World!";

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@
  00041	89 45 dc	 mov	 DWORD PTR _s$[ebp], eax
  00044	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+4
  0004a	89 4d e0	 mov	 DWORD PTR _s$[ebp+4], ecx
  0004d	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+8
  00053	89 55 e4	 mov	 DWORD PTR _s$[ebp+8], edx
  00056	a0 0c 00 00 00	 mov	 al, BYTE PTR ??_C@_0N@GCDOMLDM@Hello?5World?$CB?$AA@+12
  0005b	88 45 e8	 mov	 BYTE PTR _s$[ebp+12], al

; 209  : 	char d[13];
; 210  : 	//move_it(s,d,12);
; 211  : 	char gk[] = { 0x74, 0x20, 0x43, 0x61, 0x20, 0x6D, 0x6F, 0x6E, 0x2E, 0x00, 0x61, 0x74};

  0005e	c6 45 b0 74	 mov	 BYTE PTR _gk$[ebp], 116	; 00000074H
  00062	c6 45 b1 20	 mov	 BYTE PTR _gk$[ebp+1], 32 ; 00000020H
  00066	c6 45 b2 43	 mov	 BYTE PTR _gk$[ebp+2], 67 ; 00000043H
  0006a	c6 45 b3 61	 mov	 BYTE PTR _gk$[ebp+3], 97 ; 00000061H
  0006e	c6 45 b4 20	 mov	 BYTE PTR _gk$[ebp+4], 32 ; 00000020H
  00072	c6 45 b5 6d	 mov	 BYTE PTR _gk$[ebp+5], 109 ; 0000006dH
  00076	c6 45 b6 6f	 mov	 BYTE PTR _gk$[ebp+6], 111 ; 0000006fH
  0007a	c6 45 b7 6e	 mov	 BYTE PTR _gk$[ebp+7], 110 ; 0000006eH
  0007e	c6 45 b8 2e	 mov	 BYTE PTR _gk$[ebp+8], 46 ; 0000002eH
  00082	c6 45 b9 00	 mov	 BYTE PTR _gk$[ebp+9], 0
  00086	c6 45 ba 61	 mov	 BYTE PTR _gk$[ebp+10], 97 ; 00000061H
  0008a	c6 45 bb 74	 mov	 BYTE PTR _gk$[ebp+11], 116 ; 00000074H

; 212  : 	char test = 'A';

  0008e	c6 45 a7 41	 mov	 BYTE PTR _test$[ebp], 65 ; 00000041H

; 213  : 	char *gptrK;
; 214  : 	gptrK = &test;

  00092	8d 45 a7	 lea	 eax, DWORD PTR _test$[ebp]
  00095	89 45 98	 mov	 DWORD PTR _gptrK$[ebp], eax

; 215  : 	//reverse_it(gk, 12, gptrK);
; 216  : 	//reverse_it2(gk, 12);
; 217  : 	//f = find_it(s, "W", 12);
; 218  : 
; 219  : 	//copy_string(s,d,13);
; 220  : 	copy_string_2(s, d, 13);

  00098	6a 0d		 push	 13			; 0000000dH
  0009a	8d 45 c4	 lea	 eax, DWORD PTR _d$[ebp]
  0009d	50		 push	 eax
  0009e	8d 4d dc	 lea	 ecx, DWORD PTR _s$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?copy_string_2@@YAXPAD0H@Z ; copy_string_2
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 221  : 	return 0;

  000aa	33 c0		 xor	 eax, eax

; 222  : }

  000ac	52		 push	 edx
  000ad	8b cd		 mov	 ecx, ebp
  000af	50		 push	 eax
  000b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@main
  000b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000bb	58		 pop	 eax
  000bc	5a		 pop	 edx
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi
  000bf	5b		 pop	 ebx
  000c0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c3	33 cd		 xor	 ecx, ebp
  000c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ca	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c3		 ret	 0
  000db	90		 npad	 1
$LN8@main:
  000dc	04 00 00 00	 DD	 4
  000e0	00 00 00 00	 DD	 $LN7@main
$LN7@main:
  000e4	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e8	0d 00 00 00	 DD	 13			; 0000000dH
  000ec	00 00 00 00	 DD	 $LN3@main
  000f0	c4 ff ff ff	 DD	 -60			; ffffffc4H
  000f4	0d 00 00 00	 DD	 13			; 0000000dH
  000f8	00 00 00 00	 DD	 $LN4@main
  000fc	b0 ff ff ff	 DD	 -80			; ffffffb0H
  00100	0c 00 00 00	 DD	 12			; 0000000cH
  00104	00 00 00 00	 DD	 $LN5@main
  00108	a7 ff ff ff	 DD	 -89			; ffffffa7H
  0010c	01 00 00 00	 DD	 1
  00110	00 00 00 00	 DD	 $LN6@main
$LN6@main:
  00114	74		 DB	 116			; 00000074H
  00115	65		 DB	 101			; 00000065H
  00116	73		 DB	 115			; 00000073H
  00117	74		 DB	 116			; 00000074H
  00118	00		 DB	 0
$LN5@main:
  00119	67		 DB	 103			; 00000067H
  0011a	6b		 DB	 107			; 0000006bH
  0011b	00		 DB	 0
$LN4@main:
  0011c	64		 DB	 100			; 00000064H
  0011d	00		 DB	 0
$LN3@main:
  0011e	73		 DB	 115			; 00000073H
  0011f	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?copy_string_2@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_l$ = 16						; size = 4
?copy_string_2@@YAXPAD0H@Z PROC				; copy_string_2, COMDAT

; 183  : void copy_string_2(char* s, char* d, int l){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 184  : 	__asm{
; 185  : 		cld;

  0001e	fc		 cld

; 186  : 		mov esi, s;

  0001f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 187  : 		mov edi, d;

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]
$Loop_Through_String$3:

; 188  : 
; 189  : 	Loop_Through_String:
; 190  : 		lodsb;

  00025	ac		 lodsb

; 191  : 		stosb;

  00026	aa		 stosb

; 192  : 		cmp al, 0;

  00027	3c 00		 cmp	 al, 0

; 193  : 		jne Loop_Through_String;

  00029	75 fa		 jne	 SHORT $Loop_Through_String$3

; 194  : 	}
; 195  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
?copy_string_2@@YAXPAD0H@Z ENDP				; copy_string_2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?copy_string@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_l$ = 16						; size = 4
?copy_string@@YAXPAD0H@Z PROC				; copy_string, COMDAT

; 173  : void copy_string(char* s, char* d, int l){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 174  : 	__asm{
; 175  : 		cld;

  0001e	fc		 cld

; 176  : 		mov esi, s;

  0001f	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 177  : 		mov edi, d;

  00022	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]

; 178  : 		mov ecx, l;

  00025	8b 4d 10	 mov	 ecx, DWORD PTR _l$[ebp]

; 179  : 		rep movsb;

  00028	f3 a4		 rep	  movsb

; 180  : 	}
; 181  : }

  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
  0002d	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?copy_string@@YAXPAD0H@Z ENDP				; copy_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?find_it@@YAHPAD0H@Z
_TEXT	SEGMENT
_found$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_str$ = 8						; size = 4
_find$ = 12						; size = 4
_len$ = 16						; size = 4
?find_it@@YAHPAD0H@Z PROC				; find_it, COMDAT

; 149  : int find_it(char* str, char* find, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 150  : 	int found = -1;

  00028	c7 45 f4 ff ff
	ff ff		 mov	 DWORD PTR _found$[ebp], -1

; 151  : 	__asm{
; 152  : 		xor ecx, ecx;

  0002f	33 c9		 xor	 ecx, ecx

; 153  : 		xor ebx, ebx;

  00031	33 db		 xor	 ebx, ebx

; 154  : 		xor eax, eax;

  00033	33 c0		 xor	 eax, eax

; 155  : 		mov esi, str;

  00035	8b 75 08	 mov	 esi, DWORD PTR _str$[ebp]

; 156  : 		mov edi, find;

  00038	8b 7d 0c	 mov	 edi, DWORD PTR _find$[ebp]

; 157  : 		mov ah, [edi];

  0003b	8a 27		 mov	 ah, BYTE PTR [edi]
$String_Loop$3:

; 158  : 	String_Loop:
; 159  : 		mov al, [esi + ecx];

  0003d	8a 04 0e	 mov	 al, BYTE PTR [esi+ecx]

; 160  : 		cmp ah, al;

  00040	3a e0		 cmp	 ah, al

; 161  : 		je Found_It;

  00042	74 08		 je	 SHORT $Found_It$4

; 162  : 		inc ecx;

  00044	41		 inc	 ecx

; 163  : 		cmp ecx, len;

  00045	3b 4d 10	 cmp	 ecx, DWORD PTR _len$[ebp]

; 164  : 		jb String_Loop;

  00048	72 f3		 jb	 SHORT $String_Loop$3

; 165  : 		jmp Exit;

  0004a	eb 07		 jmp	 SHORT $Exit$5
$Found_It$4:

; 166  : 	Found_It:
; 167  : 		mov found, 1;

  0004c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _found$[ebp], 1
$Exit$5:

; 168  : 	Exit:
; 169  : 	}
; 170  : 	return found;

  00053	8b 45 f4	 mov	 eax, DWORD PTR _found$[ebp]

; 171  : }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005c	33 cd		 xor	 ecx, ebp
  0005e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00063	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00069	3b ec		 cmp	 ebp, esp
  0006b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
?find_it@@YAHPAD0H@Z ENDP				; find_it
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?reverse_it2@@YAXPADH@Z
_TEXT	SEGMENT
_gk$ = 8						; size = 4
_len$ = 12						; size = 4
?reverse_it2@@YAXPADH@Z PROC				; reverse_it2, COMDAT

; 126  : void reverse_it2(char* gk, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 127  : 	__asm{
; 128  : 		xor ecx, ecx;

  0001e	33 c9		 xor	 ecx, ecx

; 129  : 		xor eax, eax;

  00020	33 c0		 xor	 eax, eax

; 130  : 		xor ebx, ebx;

  00022	33 db		 xor	 ebx, ebx

; 131  : 		xor edx, edx;

  00024	33 d2		 xor	 edx, edx

; 132  : 		mov ecx, len;

  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 133  : 		shr ecx, 2;

  00029	c1 e9 02	 shr	 ecx, 2

; 134  : 		mov esi, gk;

  0002c	8b 75 08	 mov	 esi, DWORD PTR _gk$[ebp]
$Reverse_Loop$3:

; 135  : 
; 136  : 	Reverse_Loop:
; 137  : 		mov ax, [esi + ebx * 4];

  0002f	66 8b 04 9e	 mov	 ax, WORD PTR [esi+ebx*4]

; 138  : 		ror ax, 8;

  00033	66 c1 c8 08	 ror	 ax, 8

; 139  : 		mov dx, [esi + ebx * 4 + 2];

  00037	66 8b 54 9e 02	 mov	 dx, WORD PTR [esi+ebx*4+2]

; 140  : 		ror dx, 8;

  0003c	66 c1 ca 08	 ror	 dx, 8

; 141  : 		mov[esi + ebx * 4], ax;

  00040	66 89 04 9e	 mov	 WORD PTR [esi+ebx*4], ax

; 142  : 		mov[esi + ebx * 4 + 2], dx;

  00044	66 89 54 9e 02	 mov	 WORD PTR [esi+ebx*4+2], dx

; 143  : 		inc ebx;

  00049	43		 inc	 ebx

; 144  : 		cmp ebx, ecx;

  0004a	3b d9		 cmp	 ebx, ecx

; 145  : 		jb Reverse_Loop;

  0004c	72 e1		 jb	 SHORT $Reverse_Loop$3

; 146  : 	}
; 147  : }

  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00057	3b ec		 cmp	 ebp, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
?reverse_it2@@YAXPADH@Z ENDP				; reverse_it2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?reverse_it@@YAXPADH0@Z
_TEXT	SEGMENT
_gk$ = 8						; size = 4
_len$ = 12						; size = 4
_ptr$ = 16						; size = 4
?reverse_it@@YAXPADH0@Z PROC				; reverse_it, COMDAT

; 103  : void reverse_it(char *gk, int len, char *ptr){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 104  : 	__asm{
; 105  : 		mov ecx, len;

  0001e	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp]

; 106  : 		shr ecx, 2;

  00021	c1 e9 02	 shr	 ecx, 2

; 107  : 		mov esi, gk;

  00024	8b 75 08	 mov	 esi, DWORD PTR _gk$[ebp]

; 108  : 		xor ebx, ebx;

  00027	33 db		 xor	 ebx, ebx

; 109  : 		xor eax, eax;

  00029	33 c0		 xor	 eax, eax
$next$3:

; 110  : 
; 111  : 	next:
; 112  : 		mov ax, [esi + ebx * 4];

  0002b	66 8b 04 9e	 mov	 ax, WORD PTR [esi+ebx*4]

; 113  : 		ror ax, 8;

  0002f	66 c1 c8 08	 ror	 ax, 8

; 114  : 		mov dx, [esi + ebx * 4 + 2];

  00033	66 8b 54 9e 02	 mov	 dx, WORD PTR [esi+ebx*4+2]

; 115  : 		ror dx, 8;

  00038	66 c1 ca 08	 ror	 dx, 8

; 116  : 		mov [esi + ebx * 4], ax;

  0003c	66 89 04 9e	 mov	 WORD PTR [esi+ebx*4], ax

; 117  : 		mov [esi + ebx * 4+2], dx;

  00040	66 89 54 9e 02	 mov	 WORD PTR [esi+ebx*4+2], dx

; 118  : 		inc ebx;

  00045	43		 inc	 ebx

; 119  : 		dec ecx;

  00046	49		 dec	 ecx

; 120  : 		jne next;

  00047	75 e2		 jne	 SHORT $next$3

; 121  : 
; 122  : 	}
; 123  : 	return;
; 124  : }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
?reverse_it@@YAXPADH0@Z ENDP				; reverse_it
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?move_it@@YAXPAD0H@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_d$ = 12						; size = 4
_len$ = 16						; size = 4
?move_it@@YAXPAD0H@Z PROC				; move_it, COMDAT

; 89   : void move_it(char *s, char *d, int len){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 90   : 	__asm{
; 91   : 		mov ecx, len;

  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]

; 92   : 		mov esi, s;

  00021	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]

; 93   : 		mov edi, d;

  00024	8b 7d 0c	 mov	 edi, DWORD PTR _d$[ebp]

; 94   : 		cld;

  00027	fc		 cld

; 95   : 		rep movsb;

  00028	f3 a4		 rep	  movsb

; 96   : 		mov edx, 20;

  0002a	ba 14 00 00 00	 mov	 edx, 20			; 00000014H

; 97   : 		mov ecx, d;

  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _d$[ebp]

; 98   : 		nop;

  00032	90		 npad	 1

; 99   : 	}
; 100  : 	return;
; 101  : }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?move_it@@YAXPAD0H@Z ENDP				; move_it
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?string_practice@@YAXHDD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_a$ = 12						; size = 1
_y$ = 16						; size = 1
?string_practice@@YAXHDD@Z PROC				; string_practice, COMDAT

; 81   : void string_practice(int x, char a, char y){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 82   : 	__asm{
; 83   : 		push ecx;

  0001e	51		 push	 ecx

; 84   : 		mov[ebp - 4], 0;

  0001f	c6 45 fc 00	 mov	 BYTE PTR [ebp-4], 0

; 85   : 	}
; 86   : 	return;
; 87   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?string_practice@@YAXHDD@Z ENDP				; string_practice
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?alter_esp@@YAXXZ
_TEXT	SEGMENT
?alter_esp@@YAXXZ PROC					; alter_esp, COMDAT

; 72   : void alter_esp(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 73   : 	__asm{
; 74   : 		sub esp, 30;

  0001e	83 ec 1e	 sub	 esp, 30			; 0000001eH

; 75   : 		// if we comment out the add back of esp an error will be thrown
; 76   : 		add esp, 30;

  00021	83 c4 1e	 add	 esp, 30			; 0000001eH

; 77   : 	}
; 78   : 	return;
; 79   : }

  00024	5f		 pop	 edi
  00025	5e		 pop	 esi
  00026	5b		 pop	 ebx
  00027	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002d	3b ec		 cmp	 ebp, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?alter_esp@@YAXXZ ENDP					; alter_esp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?throwbits045@@YAXXZ
_TEXT	SEGMENT
?throwbits045@@YAXXZ PROC				; throwbits045, COMDAT

; 59   : void throwbits045(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 60   : 
; 61   : 	__asm {
; 62   : 		// A2 = 10100010
; 63   : 		mov bl, 0xA2;

  0001e	b3 a2		 mov	 bl, -94			; ffffffa2H

; 64   : 		movzx eax, bl;

  00020	0f b6 c3	 movzx	 eax, bl

; 65   : 		// mask out the 1st and 7th bits should end up being 00100000 0x20
; 66   : 		and al, 0x7D;

  00023	24 7d		 and	 al, 125			; 0000007dH

; 67   : 	}
; 68   : 
; 69   : 	return;
; 70   : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?throwbits045@@YAXXZ ENDP				; throwbits045
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?maskoutbits@@YAXXZ
_TEXT	SEGMENT
?maskoutbits@@YAXXZ PROC				; maskoutbits, COMDAT

; 47   : void maskoutbits(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 48   : 
; 49   : 	__asm {
; 50   : 		// A2 = 10100010
; 51   : 		mov al, 0xA2; 

  0001e	b0 a2		 mov	 al, -94			; ffffffa2H

; 52   : 		// mask out the 1st and 7th bits should end up being 00100000 0x20
; 53   : 		and al, 0x7D;

  00020	24 7d		 and	 al, 125			; 0000007dH

; 54   : 	}
; 55   : 
; 56   : 	return;
; 57   : }

  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
  00024	5b		 pop	 ebx
  00025	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
?maskoutbits@@YAXXZ ENDP				; maskoutbits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?force_0_3_7_to_1@@YAXXZ
_TEXT	SEGMENT
?force_0_3_7_to_1@@YAXXZ PROC				; force_0_3_7_to_1, COMDAT

; 39   : void force_0_3_7_to_1(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 40   : 	__asm {
; 41   : 		xor eax, eax;

  0001e	33 c0		 xor	 eax, eax

; 42   : 		or ah, 0x89;

  00020	80 cc 89	 or	 ah, -119		; ffffff89H

; 43   : 	}
; 44   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?force_0_3_7_to_1@@YAXXZ ENDP				; force_0_3_7_to_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?divide_by_16_signed@@YAXXZ
_TEXT	SEGMENT
?divide_by_16_signed@@YAXXZ PROC			; divide_by_16_signed, COMDAT

; 30   : void divide_by_16_signed(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 31   : 	__asm{
; 32   : 		xor ebx, ebx;

  0001e	33 db		 xor	 ebx, ebx

; 33   : 		mov ebx, 0xC0;

  00020	bb c0 00 00 00	 mov	 ebx, 192		; 000000c0H

; 34   : 		sar ebx, 4;

  00025	c1 fb 04	 sar	 ebx, 4

; 35   : 	}
; 36   : 
; 37   : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?divide_by_16_signed@@YAXXZ ENDP			; divide_by_16_signed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?decrement2@@YAXXZ
_TEXT	SEGMENT
?decrement2@@YAXXZ PROC					; decrement2, COMDAT

; 20   : void decrement2(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 21   : 
; 22   : 	__asm {
; 23   : 		mov eax, 0x5F0AC;

  0001e	b8 ac f0 05 00	 mov	 eax, 389292		; 0005f0acH

; 24   : 		dec ah;

  00023	fe cc		 dec	 ah

; 25   : 	}
; 26   : 
; 27   : 	return;
; 28   : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?decrement2@@YAXXZ ENDP					; decrement2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?twos_comp@@YAXXZ
_TEXT	SEGMENT
?twos_comp@@YAXXZ PROC					; twos_comp, COMDAT

; 11   : void twos_comp(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 12   : 	__asm{
; 13   : 		xor ebx, ebx;

  0001e	33 db		 xor	 ebx, ebx

; 14   : 		mov ebx, 0xFFFFFFFF;

  00020	bb ff ff ff ff	 mov	 ebx, -1

; 15   : 		xor ebx, 0xFFFFFFFF;

  00025	83 f3 ff	 xor	 ebx, -1

; 16   : 		inc ebx;

  00028	43		 inc	 ebx

; 17   : 	}
; 18   : }

  00029	5f		 pop	 edi
  0002a	5e		 pop	 esi
  0002b	5b		 pop	 ebx
  0002c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?twos_comp@@YAXXZ ENDP					; twos_comp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File v:\school files\cs3843\vsprojects\test_3_study\test_3_study\source.cpp
;	COMDAT ?decrement@@YAXXZ
_TEXT	SEGMENT
?decrement@@YAXXZ PROC					; decrement, COMDAT

; 1    : void decrement(){

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 2    : 
; 3    : 	__asm {
; 4    : 		mov eax, 0x9A3C;

  0001e	b8 3c 9a 00 00	 mov	 eax, 39484		; 00009a3cH

; 5    : 		dec ah;

  00023	fe cc		 dec	 ah

; 6    : 	}
; 7    : 
; 8    : 	return;
; 9    : }

  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
  00028	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?decrement@@YAXXZ ENDP					; decrement
_TEXT	ENDS
END
